*********************************summary-ph-9-M-6-Module 32:Understand Common JavaScript Concepts*********************************
32-1 Module Overview, Primitive And Non-Primitive Data Type:
1.
// JS is a dynamic type programming language

const a = 5;
const b = 'sohel';
const c = 33;
const d = [1, 2, 1, 5, 7];
const e = {
    firstName: 'Sohel',
    lastName: 'Shahid',
    age: 32
}
const f = true;
const g = null;
const h = undefined;

console.log(typeof a, typeof b, typeof c, typeof d, typeof e, typeof f, typeof g, typeof h)

let x = 5;
let y = 7;
console.log(x, y);
y = x;
console.log(x, y);

y = 9;
console.log(x, y);

let p = { job: 'web developer' };
let q = p;
console.log(p, q)

q = { job: 'backend developer' };
console.log(p, q)

q.job = 'full stack developer';
console.log(p, q)




32-2 Null Vs Undefined, Different Ways You Will Get Undefined
1.
// 32-2 Null Vs Undefined, Different Ways You Will Get Undefined
// 8 ways to get undefiend

2.
let number;
console.log(number);     // => undefined

let movie = { name: 'Interstellar' };
console.log(movie.year); // => undefined

let movies = ['Interstellar', 'Alexander'];
console.log(movies[3]);  // => undefined

console.log(typeof undefined === 'undefined'); // => true

let nothing;
console.log(typeof nothing === 'undefined');   // => true


3.
//https://dmitripavlutin.com/7-tips-to-handle-undefined-in-javascript/

const unsafeOptions = {
    fontSize: 18
};
const defaults = {
    fontSize: 16,
    color: 'black'
};
const options = {
    ...defaults,
    ...unsafeOptions
};

console.log(options.fontSize); // => 18
console.log(options.color);    // => 'black'


4.
const styles = {
    fontSize: 18
};

console.log(styles.color)
console.log(styles.color ?? 'black'); // => 'black'
console.log(styles.fontSize ?? 16);   // => 18


5.
function multiply(a, b) {
    console.log(a); // => 5
    console.log(b); // => undefined
    return a * b;
}

console.log(multiply(5)); // => NaN


6.
function multiply2(a, b) {
    if (b === undefined) {
        b = 2;
    }
    console.log(a); // => 5
    console.log(b); // => 2
    return a * b;
}

console.log(multiply2(5)); // => 10


7.
function square(x) {
    const res = x * x;
    // return
    // return res;
}

console.log(square(2)); // => undefined


8.
console.log(void 1);                    // => undefined
console.log(void (false));              // => undefined
console.log(void { name: 'John Smith' }); // => undefined
console.log(void Math.min(1, 3));       // => undefined


9.
const colors = ['blue', 'white', 'red'];
console.log(colors[0]);  // => undefined
console.log(colors[5]);  // => undefined
console.log(colors[-1]); // => undefined


10.
const sparse1 = new Array(3);
console.log(sparse1);    // => [<empty>, <empty>, <empty>]
console.log(typeof sparse1);
console.log(sparse1[0]); // => undefined
console.log(sparse1[1]); // => undefined

const sparse2 = ['white', , 'blue']
console.log(sparse2);    // => ['white', <empty>, 'blue']
console.log(sparse2[1]); // => undefined


//https://dmitripavlutin.com/7-tips-to-handle-undefined-in-javascript/

11.
const sixth = [1, 2, 51, 4, 5, 6, 7, 8, 78];
console.log(sixth);
delete sixth[1];//to remove item not use delete method,use splice method
console.log(sixth)

12.
let arr = ["shift", "splice", "filter", "pop"];

// Removing the specified element from the array  
let spliced = arr.splice(1, 1);
console.log("Removed element: " + spliced);
console.log("Remaining elements: " + arr);


12.
// JavaScript code to illustrate splice() function  
let arrrrr = ["shift", "splice", "filter", "pop"];

// Removing the specified element by value from the array  
for (let i = 0; i < arrrrr.length; i++) {
    if (arrrrr[i] === "splice") {
        let spliced = arrrrr.splice(i, 2);
        console.log("Removed element: " + spliced);
        console.log("Remaining elements: " + arrrrr);
    }
}


13.
// JavaScript to illustrate filter() method 
function isPositive(value) {
    return value > 0;
}

function func() {
    let filtered = [101, 98, 12, -1, 848].filter(isPositive);
    console.log("Positive elements in array: " + filtered);
}
func();

//https://www.geeksforgeeks.org/remove-elements-from-a-javascript-array/





32-3 Different Truthy And Falsy Values In JavaScript:
1.
/*
    Truthy:
    1.true,
    2.any +,- number other than 0
    3.any string other than empty string
    4.'0','false'
    5.{}
    6.[]

    Falsy:
    1.false
    2.0
    3.''
    4.undefined
    5.null
*/
2.
// const x = '0'
// const x;SyntaxError: Missing initializer in const declaration
// let x;
// let x = null;
let x = {};
console.log(x)
if (x) {
    console.log(`${x} is truthy value`)
} else {
    console.log(`${x} is falsy value`)
}




32-4 Double Equal (==) Vs Triple Equal (===), Implicit Conversion:
1.
const a = 1;
// const b = '1';
const b = true;
if (a === b) {
    console.log('bothe r same ')
}else{
    console.log('bothe r not same ')
}
//== er use cancel,use===
//type casting or type conversion in js 
//https://www.geeksforgeeks.org/primitive-and-non-primitive-data-types-in-javascript/
// https://youtu.be/tLo6g3yEm7o?si=KaoMW3YbY0QY7uko




32-5 Block Scope Global Scope Simple Understanding Of Hoisting
1.
function add(a,b){
    const first = a;
    const second = b;
    const total = first + second;
    // const total = a+b;
    if(a>b){
        const sub = a-b;
        console.log(sub)
    }
    return total;
}
// add(10,5);
console.log(add(10,5));
// function add(a,b){
//     return a+b;
// }
// console.log(add(5,6));

for(var i =0;i<=5;i++){
    console.log(i);
}
console.log('outside---->here use var',i)
console.log(`---------------------`)

for(let j =0;j<=3;j++){
    console.log(j);
}
// console.log('outside---->here use let',j)//ReferenceError: j is not defined

/*hoisting:In JavaScript, hoisting refers to the built-in behavior of the language through which declarations of functions, variables, and classes are moved to the top of their scope â€“ all before code execution. In turn, this allows us to use functions, variables, and classes before they are declared
*/

//https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
add(3,4);
let total = add(4,5);
function add (a,b) {
    console.log(a+b);
    // return a+b;
}
add(3,4);
// let total = add(4,5);
// console.log(total)

console.log(a); //ReferenceError: a is not defined
var a;
// a=9
// var a =9;
console.log(a)
var a =9;
a=9






32-6 (Advanced) Closure, Encapsulation, Private Variable
1.
/*
A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time 
a function is created, at function creation time.
*/

2.
function kitchen(){
    let roast = 0;
    return function(){
        roast ++;
        return roast;
    }
}

const firstServer = kitchen();
console.log(firstServer);
console.log(firstServer());
console.log(firstServer());
console.log(firstServer());
console.log(firstServer());

3.
function add(a,b){
    return a+b;
}
const sum = add(22,33);
console.log(sum)
// console.log(sum())  //TypeError: sum is not a function

4.
function makeFunc() {
    const name = "Mozilla";
    function displayName() {
      console.log(name);
    }
    return displayName;
  }
  
  const myFunc = makeFunc();
//   myFunc();
console.log(myFunc)
console.log(myFunc())


5.
function makeAdder(x) {
    return function (y) {
      return x + y;
    };
  }
  
  const add5 = makeAdder(5);
//   const add10 = makeAdder(10);
  
  console.log(add5(2)); // 7
//   console.log(add10(2)); // 12

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

6.
function stopWatch(){
    let counter = 0;
    return function(){
        counter++;
        return counter;
    }
}
console.log(stopWatch)
console.log(stopWatch())
let stop = stopWatch();
console.log(stop)
console.log(stop())
console.log(stop())
console.log(stop())
console.log(stopWatch())



32-7 (Optional) Callback Function And Pass Different Functions:
1.
/*A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete 
some kind of routine or action.
*/
/*
A callback is a function passed as an argument to another function
This technique allows a function to call another function
A callback function can run after another function has finished
*/

2.
let value = 1;

// doSomething(() =>
//     {value = 2;}
// );

console.log(value);

3.
function myDisplayer(some) {
    console.log(some);
}
  
  function myFirst() {
    myDisplayer("Hello");
  }
  
  function mySecond() {
    myDisplayer("Goodbye");
  }
  
  myFirst();
  mySecond();


4.
  function myDisplayer2(some) {
    console.log(some);
  }
  
  function myFirst2() {
    myDisplayer2("Hello");
  }
  
  function mySecond2() {
    myDisplayer2("Goodbye");
  }
  
  mySecond2();
  myFirst2();


5.
  function myDisplayer3(some) {
    console.log(some);
  }
  
  function myCalculator(num1, num2) {
    let sum = num1 + num2;
    return sum;
  }
  
  let result = myCalculator(55, 65);
  myDisplayer3(result);

  
  
6.
  console.log(`-------tricky callback function----------`);
  function myDisplayer4(something) {
    console.log(something);
  }
  function myCalculator2(num1, num2, myCallbackkk) {
    let sum = num1 + num2;
    myCallbackkk('tricky callback function',sum);
  }  
  myCalculator2(51, 52, myDisplayer4);

  /*
  In the example above, myDisplayer is a called a callback function.
  It is passed to myCalculator() as an argument.
  When you pass a function as an argument, remember not to use parenthesis.
  */


7.
const myNumbers = [4, 1, -20, -7, 5, 9, -6,-22,33,-44,-77,88,99,0,2];
const plusNumbr =(x)=>x>=0
// (x) => x >= 0
const posNumbers = removeNeg(myNumbers,plusNumbr);
console.log(posNumbers);

// Remove negative numbers
function removeNeg(numbers, callback) {
  const myArray = [];
  for (const y of numbers) {
    if (callback(y)) {
      myArray.push(y);
    }
  }
  return myArray;
}
console.log(`-----------callback function---------------`)
function greeting(grtHandlFunton,name){
    grtHandlFunton(name)
}

function greetingHandler(name){
    console.log('good morning',name);
}
function greetEvening(name){
    console.log('good evening',name);
}

function greetNight(name){
    console.log('good night',name)
}

greeting(greetingHandler)
greeting(greetingHandler,'sohel')
greeting(greetingHandler,'sumi')
greeting(greetEvening,'Aadil')
greeting(greetNight,'Shahid')

